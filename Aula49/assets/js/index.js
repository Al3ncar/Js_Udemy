// Declara√ß√£o de fun√ß√£o (Function Hoisting)
// A engine do JS sempre ir√° elevar as declara√ß√µes
// de fun√ß√µes e variaveis declaradas pro topo do arquivo
// logo eu posso chamar a fun√ßao mesmo antes dela ser criada

FalaOi(); // chamando a fun√ß√£o

function FalaOi() {
  // constru√ß√£o de fun√ß√£o
  console.log("oiii");
}

console.log(" "); // Espa√ßo no console
// As fun√ß√£o s√£o First Class Object ( Objetos de Primeira classe )
// As fun√ß√µes podem ser tratadas como dados, criar uma fun√ß√£o como um dado
// e chamado de Function Express, exemplo:

const souUmDado = function () {
  console.log("Sou um dado");
};

souUmDado();

console.log(" "); // Espa√ßo no console

// Isso √© bom por eu poder jogar um dado como um paremetro de outra fun√ß√£o
// exemplo:

const souUmDado2 = function () {
  console.log("Sou outro dado");
};

function executaFun√ß√£o(funcao) {
  console.log("Vou executar a fun√ß√£o abaixo:üëá");
  funcao();
}

executaFun√ß√£o(souUmDado2);

console.log(" "); // Espa√ßo no console

// Arrow Function ES6+

const funcaoArrow = () => {
  console.log("Sou uma Fun√ß√£o Arro");
};

// Isso pode ser considerado como uma expression function, porem ha um problema quando for usar o "this"